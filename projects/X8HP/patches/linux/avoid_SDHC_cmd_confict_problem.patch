diff --git a/drivers/amlogic/mmc/aml_sdhc_m8.c b/drivers/amlogic/mmc/aml_sdhc_m8.c
index 2afd2e1..a930a7a 100755
--- a/drivers/amlogic/mmc/aml_sdhc_m8.c
+++ b/drivers/amlogic/mmc/aml_sdhc_m8.c
@@ -46,6 +46,8 @@ static unsigned int sdhc_error_flag = 0;
 static unsigned int sdhc_debug_flag = 0;
 static int sdhc_err_bak;

+static struct semaphore sdhc_sema;
+
 void aml_sdhc_send_stop(struct amlsd_host* host);

 static void aml_sdhc_clk_switch (struct amlsd_platform* pdata, int clk_div, int clk_src_sel);
@@ -1009,6 +1011,7 @@ void aml_sdhc_request_done(struct mmc_host *mmc, struct mmc_request *mrq)
		sdhc_err("aml_sdhc_wait_ready request done\n");
     }
     mmc_request_done(host->mmc, mrq);
+    up(&sdhc_sema);
 }

 char *msg_err[] = {
@@ -1162,6 +1165,7 @@ static void aml_sdhc_timeout(struct work_struct *work)
     if(host->xfer_step == XFER_FINISHED){
         spin_unlock_irqrestore(&host->mrq_lock, flags);
         sdhc_err("timeout after xfer finished\n");
+        up(&sdhc_sema);
         return;
     }

@@ -1178,6 +1182,7 @@ static void aml_sdhc_timeout(struct work_struct *work)

         sdhc_err("%s: cmd%d, ISR have been run, xfer_step=%d, time_start_cnt=%ldmS, timeout_cnt=%d\n",
                 mmc_hostname(host->mmc), host->mrq->cmd->opcode, host->xfer_step, time_start_cnt, timeout_cnt);
+        up(&sdhc_sema);
         return;
     }
 timeout_handle:
@@ -1309,6 +1314,7 @@ void aml_sdhc_request(struct mmc_host *mmc, struct mmc_request *mrq)
     unsigned long flags;
     unsigned int timeout;
     u32 tuning_opcode;
+    u32 conflit_count = 0;

     BUG_ON(!mmc);
     BUG_ON(!mrq);
@@ -1316,8 +1322,19 @@ void aml_sdhc_request(struct mmc_host *mmc, struct mmc_request *mrq)
     pdata = mmc_priv(mmc);
     host = (void*)pdata->host;

-    if (aml_check_unsupport_cmd(mmc, mrq))
-        return;
+    while (down_trylock(&sdhc_sema)) {
+            if (conflit_count++ > 10) {
+                    sdhc_err("SDHC CMD conflict!\n");
+                    mmc_request_done(mmc, mrq);
+                    return;
+            }
+            msleep(50);
+    }
+
+    if (aml_check_unsupport_cmd(mmc, mrq)) {
+            up(&sdhc_sema);
+            return;
+    }

     //only for SDCARD
     if(!pdata->is_in || (!host->init_flag && aml_card_type_sd(pdata))){
@@ -1326,20 +1343,31 @@ void aml_sdhc_request(struct mmc_host *mmc, struct mmc_request *mrq)
         mrq->cmd->retries = 0;
         spin_unlock_irqrestore(&host->mrq_lock, flags);
         mmc_request_done(mmc, mrq);
+        up(&sdhc_sema);
         return;
     }

     if (pdata->need_retuning && mmc->card) {
+        up(&sdhc_sema);
         /* eMMC uses cmd21 but sd and sdio use cmd19 */
         tuning_opcode = (mmc->card->type == MMC_TYPE_MMC)?
             MMC_SEND_TUNING_BLOCK_HS200 : MMC_SEND_TUNING_BLOCK;
         aml_sdhc_execute_tuning(mmc, tuning_opcode);
-    }

-    // aml_sdhc_host_reset(host);
-    // vista = readl(host->base+SDHC_ISTA);
-    // writel(vista, host->base+SDHC_ISTA);
-    aml_sdhc_disable_imask(host, SDHC_ICTL_ALL);
+        while (down_trylock(&sdhc_sema)) {
+                if (conflit_count++ > 10) {
+                        mmc_request_done(mmc, mrq);
+                        sdhc_err(" SDHC CMD conflict in tuning\n");
+                        return;
+                }
+                msleep(50);
+        }
+
+        // aml_sdhc_host_reset(host);
+        // vista = readl(host->base+SDHC_ISTA);
+        // writel(vista, host->base+SDHC_ISTA);
+        aml_sdhc_disable_imask(host, SDHC_ICTL_ALL);
+    }

     sdhc_dbg(AMLSD_DBG_REQ ,"%s: starting CMD%u arg %08x flags %08x\n",
         mmc_hostname(mmc), mrq->cmd->opcode,
@@ -2394,6 +2422,8 @@ static int aml_sdhc_probe(struct platform_device *pdev)
         goto fail_init_host;

     aml_sdhc_reg_init(host);
+
+    sema_init(&sdhc_sema, 1);
     host->pdev = pdev;

     for(i=0;i<MMC_MAX_DEVICE;i++){

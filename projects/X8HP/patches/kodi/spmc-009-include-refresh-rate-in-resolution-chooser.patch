From 7f14b87bbd5bc5314981e222f206877190007fda Mon Sep 17 00:00:00 2001
From: "Chris \"Koying\" Browet" <cbro@semperpax.com>
Date: Sat, 16 Jul 2016 20:11:48 +0200
Subject: [PATCH] CHG: Include refresh rate in resolution chooser

---
 xbmc/settings/DisplaySettings.cpp |  6 +++---
 xbmc/windowing/WinSystem.cpp      | 27 ++++++---------------------
 xbmc/windowing/WinSystem.h        |  3 ++-
 3 files changed, 11 insertions(+), 25 deletions(-)

diff --git a/xbmc/settings/DisplaySettings.cpp b/xbmc/settings/DisplaySettings.cpp
index 7993a73..4a5b06c 100644
--- a/xbmc/settings/DisplaySettings.cpp
+++ b/xbmc/settings/DisplaySettings.cpp
@@ -680,12 +680,12 @@ void CDisplaySettings::SettingOptionsResolutionsFiller(const CSetting *setting,
   else
   {
     std::map<RESOLUTION, RESOLUTION_INFO> resolutionInfos;
-    std::vector<RESOLUTION_WHR> resolutions = g_Windowing.ScreenResolutions(info.iScreen, info.fRefreshRate);
+    std::vector<RESOLUTION_WHR> resolutions = g_Windowing.ScreenResolutions(info.iScreen);
     for (std::vector<RESOLUTION_WHR>::const_iterator resolution = resolutions.begin(); resolution != resolutions.end(); ++resolution)
     {
       list.push_back(std::make_pair(
-        StringUtils::Format("%dx%d%s", resolution->width, resolution->height,
-                            ModeFlagsToString(resolution->flags, false).c_str()),
+        StringUtils::Format("%dx%d%s @ %.2f", resolution->width, resolution->height,
+                            ModeFlagsToString(resolution->flags, false).c_str(), resolution->RefreshRate),
                             resolution->ResInfo_Index));
 
       resolutionInfos.insert(std::make_pair((RESOLUTION)resolution->ResInfo_Index, CDisplaySettings::GetInstance().GetResolutionInfo(resolution->ResInfo_Index)));
diff --git a/xbmc/windowing/WinSystem.cpp b/xbmc/windowing/WinSystem.cpp
index b8be750..078325b 100644
--- a/xbmc/windowing/WinSystem.cpp
+++ b/xbmc/windowing/WinSystem.cpp
@@ -130,7 +130,7 @@ int CWinSystemBase::DesktopResolution(int screen)
   return RES_DESKTOP;
 }
 
-static void AddResolution(std::vector<RESOLUTION_WHR> &resolutions, unsigned int addindex, float bestRefreshrate)
+static void AddResolution(std::vector<RESOLUTION_WHR> &resolutions, unsigned int addindex)
 {
   RESOLUTION_INFO resInfo = CDisplaySettings::GetInstance().GetResolutionInfo(addindex);
   int width  = resInfo.iScreenWidth;
@@ -138,23 +138,7 @@ static void AddResolution(std::vector<RESOLUTION_WHR> &resolutions, unsigned int
   int flags  = resInfo.dwFlags & D3DPRESENTFLAG_MODEMASK;
   float refreshrate = resInfo.fRefreshRate;
 
-  // don't touch RES_DESKTOP
-  for (unsigned int idx = 1; idx < resolutions.size(); idx++)
-    if (   resolutions[idx].width == width
-        && resolutions[idx].height == height
-        &&(resolutions[idx].flags & D3DPRESENTFLAG_MODEMASK) == flags)
-    {
-      // check if the refresh rate of this resolution is better suited than
-      // the refresh rate of the resolution with the same width/height/interlaced
-      // property and if so replace it
-      if (bestRefreshrate > 0.0 && refreshrate == bestRefreshrate)
-        resolutions[idx].ResInfo_Index = addindex;
-
-      // no need to add the resolution again
-      return;
-    }
-
-  RESOLUTION_WHR res = {width, height, flags, (int)addindex};
+  RESOLUTION_WHR res = {width, height, flags, refreshrate, (int)addindex};
   resolutions.push_back(res);
 }
 
@@ -164,10 +148,11 @@ static bool resSortPredicate(RESOLUTION_WHR i, RESOLUTION_WHR j)
   // a "!=" on the flags comparison resulted in memory corruption
   return (    i.width < j.width
           || (i.width == j.width && i.height < j.height)
-          || (i.width == j.width && i.height == j.height && i.flags < j.flags) );
+          || (i.width == j.width && i.height == j.height && i.flags < j.flags)
+          || (i.width == j.width && i.height == j.height && i.flags == j.flags && i.RefreshRate < j.RefreshRate) );
 }
 
-std::vector<RESOLUTION_WHR> CWinSystemBase::ScreenResolutions(int screen, float refreshrate)
+std::vector<RESOLUTION_WHR> CWinSystemBase::ScreenResolutions(int screen)
 {
   std::vector<RESOLUTION_WHR> resolutions;
 
@@ -175,7 +160,7 @@ std::vector<RESOLUTION_WHR> CWinSystemBase::ScreenResolutions(int screen, float
   {
     RESOLUTION_INFO info = CDisplaySettings::GetInstance().GetResolutionInfo(idx);
     if (info.iScreen == screen)
-      AddResolution(resolutions, idx, refreshrate);
+      AddResolution(resolutions, idx);
   }
 
   // Can't assume a sort order
diff --git a/xbmc/windowing/WinSystem.h b/xbmc/windowing/WinSystem.h
index d7132b5..c1a9337 100644
--- a/xbmc/windowing/WinSystem.h
+++ b/xbmc/windowing/WinSystem.h
@@ -41,6 +41,7 @@ struct RESOLUTION_WHR
   int width;
   int height;
   int flags; //< only D3DPRESENTFLAG_MODEMASK flags
+  float RefreshRate;
   int ResInfo_Index;
 };
 
@@ -102,7 +103,7 @@ class CWinSystemBase
   virtual void UpdateResolutions();
   void SetWindowResolution(int width, int height);
   int DesktopResolution(int screen);
-  std::vector<RESOLUTION_WHR> ScreenResolutions(int screen, float refreshrate);
+  std::vector<RESOLUTION_WHR> ScreenResolutions(int screen);
   std::vector<REFRESHRATE> RefreshRates(int screen, int width, int height, uint32_t dwFlags);
   REFRESHRATE DefaultRefreshRate(int screen, std::vector<REFRESHRATE> rates);
   virtual bool HasCalibration(const RESOLUTION_INFO &resInfo) { return true; };
